Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program element
Rule 3     element -> declaration Semi
Rule 4     element -> function
Rule 5     program -> empty
Rule 6     type -> Int
Rule 7     function -> type Identifier LParen RParen LBrace block RBrace
Rule 8     function -> type Identifier LParen parameter RParen LBrace block RBrace
Rule 9     parameter -> parameter parameter_item
Rule 10    parameter -> empty
Rule 11    parameter_item -> Comma declaration
Rule 12    parameter_item -> declaration
Rule 13    block -> block block_item
Rule 14    block -> empty
Rule 15    block_item -> statement
Rule 16    block_item -> declaration Semi
Rule 17    statement -> statement_matched
Rule 18    statement -> statement_unmatched
Rule 19    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 20    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 21    statement_unmatched -> If LParen expression RParen statement
Rule 22    statement_matched -> While LParen expression RParen statement_matched
Rule 23    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 24    statement_matched -> Do statement_matched While expression Semi
Rule 25    statement_unmatched -> Do statement_unmatched While expression Semi
Rule 26    statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched
Rule 27    statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched
Rule 28    statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched
Rule 29    statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched
Rule 30    statement_matched -> For LParen Semi expression Semi expression RParen statement_matched
Rule 31    statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched
Rule 32    statement_matched -> For LParen expression Semi Semi expression RParen statement_matched
Rule 33    statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched
Rule 34    statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched
Rule 35    statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched
Rule 36    statement_matched -> For LParen expression Semi expression Semi RParen statement_matched
Rule 37    statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched
Rule 38    statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched
Rule 39    statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched
Rule 40    statement_matched -> For LParen expression Semi Semi RParen statement_matched
Rule 41    statement_matched -> For LParen declaration Semi Semi RParen statement_matched
Rule 42    statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched
Rule 43    statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched
Rule 44    statement_matched -> For LParen Semi expression Semi RParen statement_matched
Rule 45    statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched
Rule 46    statement_matched -> For LParen Semi Semi expression RParen statement_matched
Rule 47    statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched
Rule 48    statement_matched -> For LParen Semi Semi RParen statement_matched
Rule 49    statement_unmatched -> For LParen Semi Semi RParen statement_unmatched
Rule 50    statement_matched -> Return expression Semi
Rule 51    statement_matched -> opt_expression Semi
Rule 52    statement_matched -> LBrace block RBrace
Rule 53    statement_matched -> Break Semi
Rule 54    statement_matched -> Continue Semi
Rule 55    opt_expression -> expression
Rule 56    opt_expression -> empty
Rule 57    declaration -> type Identifier
Rule 58    declaration -> type Identifier Assign expression
Rule 59    expression -> assignment
Rule 60    assignment -> conditional
Rule 61    conditional -> logical_or
Rule 62    logical_or -> logical_and
Rule 63    logical_and -> bit_or
Rule 64    bit_or -> xor
Rule 65    xor -> bit_and
Rule 66    bit_and -> equality
Rule 67    equality -> relational
Rule 68    relational -> additive
Rule 69    additive -> multiplicative
Rule 70    multiplicative -> unary
Rule 71    unary -> postfix
Rule 72    postfix -> primary
Rule 73    postfix -> Identifier LParen expression_list RParen
Rule 74    expression_list -> expression_list expression_item
Rule 75    expression_list -> empty
Rule 76    expression_item -> Comma expression
Rule 77    expression_item -> expression
Rule 78    unary -> Minus unary
Rule 79    unary -> BitNot unary
Rule 80    unary -> Not unary
Rule 81    assignment -> Identifier Assign expression
Rule 82    logical_or -> logical_or Or logical_and
Rule 83    logical_and -> logical_and And bit_or
Rule 84    bit_or -> bit_or BitOr xor
Rule 85    xor -> xor Xor bit_and
Rule 86    bit_and -> bit_and BitAnd equality
Rule 87    equality -> equality NotEqual relational
Rule 88    equality -> equality Equal relational
Rule 89    relational -> relational Less additive
Rule 90    relational -> relational Greater additive
Rule 91    relational -> relational LessEqual additive
Rule 92    relational -> relational GreaterEqual additive
Rule 93    additive -> additive Plus multiplicative
Rule 94    additive -> additive Minus multiplicative
Rule 95    multiplicative -> multiplicative Mul unary
Rule 96    multiplicative -> multiplicative Div unary
Rule 97    multiplicative -> multiplicative Mod unary
Rule 98    conditional -> logical_or Question expression Colon conditional
Rule 99    primary -> Integer
Rule 100   primary -> Identifier
Rule 101   primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 83
Assign               : 58 81
BitAnd               : 86
BitNot               : 79
BitOr                : 84
Break                : 53
Colon                : 98
Comma                : 11 76
Continue             : 54
Div                  : 96
Do                   : 24 25
Else                 : 19 20
Equal                : 88
For                  : 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
Greater              : 90
GreaterEqual         : 92
Identifier           : 7 8 57 58 73 81 100
If                   : 19 20 21
Int                  : 6
Integer              : 99
LBrace               : 7 8 52
LParen               : 7 8 19 20 21 22 23 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 73 101
Less                 : 89
LessEqual            : 91
Minus                : 78 94
Mod                  : 97
Mul                  : 95
Not                  : 80
NotEqual             : 87
Or                   : 82
Plus                 : 93
Question             : 98
RBrace               : 7 8 52
RParen               : 7 8 19 20 21 22 23 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 73 101
Return               : 50
Semi                 : 3 16 24 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 51 53 54
While                : 22 23 24 25
Xor                  : 85
error                : 

Nonterminals, with rules where they appear

additive             : 68 89 90 91 92 93 94
assignment           : 59
bit_and              : 65 85 86
bit_or               : 63 83 84
block                : 7 8 13 52
block_item           : 13
conditional          : 60 98
declaration          : 3 11 12 16 27 29 33 35 37 39 41 43
element              : 2
empty                : 5 10 14 56 75
equality             : 66 86 87 88
expression           : 19 20 21 22 23 24 25 26 26 26 27 27 28 28 28 29 29 30 30 31 31 32 32 33 34 34 35 36 36 37 38 38 39 40 42 44 45 46 47 50 55 58 76 77 81 98 101
expression_item      : 74
expression_list      : 73 74
function             : 4
logical_and          : 62 82 83
logical_or           : 61 82 98
multiplicative       : 69 93 94 95 96 97
opt_expression       : 51
parameter            : 8 9
parameter_item       : 9
postfix              : 71
primary              : 72
program              : 2 0
relational           : 67 87 88 89 90 91 92
statement            : 15 21
statement_matched    : 17 19 19 20 22 24 26 27 30 32 33 36 37 40 41 44 46 48
statement_unmatched  : 18 20 23 25 28 29 31 34 35 38 39 42 43 45 47 49
type                 : 7 8 57 58
unary                : 70 78 79 80 95 96 97
xor                  : 64 84 85

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program element
    (5) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . element
    (3) element -> . declaration Semi
    (4) element -> . function
    (57) declaration -> . type Identifier
    (58) declaration -> . type Identifier Assign expression
    (7) function -> . type Identifier LParen RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter RParen LBrace block RBrace
    (6) type -> . Int

    Int             shift and go to state 7

    element                        shift and go to state 3
    declaration                    shift and go to state 4
    function                       shift and go to state 5
    type                           shift and go to state 6

state 2

    (5) program -> empty .

    Int             reduce using rule 5 (program -> empty .)
    $end            reduce using rule 5 (program -> empty .)


state 3

    (2) program -> program element .

    Int             reduce using rule 2 (program -> program element .)
    $end            reduce using rule 2 (program -> program element .)


state 4

    (3) element -> declaration . Semi

    Semi            shift and go to state 8


state 5

    (4) element -> function .

    Int             reduce using rule 4 (element -> function .)
    $end            reduce using rule 4 (element -> function .)


state 6

    (57) declaration -> type . Identifier
    (58) declaration -> type . Identifier Assign expression
    (7) function -> type . Identifier LParen RParen LBrace block RBrace
    (8) function -> type . Identifier LParen parameter RParen LBrace block RBrace

    Identifier      shift and go to state 9


state 7

    (6) type -> Int .

    Identifier      reduce using rule 6 (type -> Int .)


state 8

    (3) element -> declaration Semi .

    Int             reduce using rule 3 (element -> declaration Semi .)
    $end            reduce using rule 3 (element -> declaration Semi .)


state 9

    (57) declaration -> type Identifier .
    (58) declaration -> type Identifier . Assign expression
    (7) function -> type Identifier . LParen RParen LBrace block RBrace
    (8) function -> type Identifier . LParen parameter RParen LBrace block RBrace

    Semi            reduce using rule 57 (declaration -> type Identifier .)
    Assign          shift and go to state 10
    LParen          shift and go to state 11


state 10

    (58) declaration -> type Identifier Assign . expression
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 13
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 11

    (7) function -> type Identifier LParen . RParen LBrace block RBrace
    (8) function -> type Identifier LParen . parameter RParen LBrace block RBrace
    (9) parameter -> . parameter parameter_item
    (10) parameter -> . empty
    (1) empty -> .

  ! shift/reduce conflict for RParen resolved as shift
    RParen          shift and go to state 33
    Comma           reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)

  ! RParen          [ reduce using rule 1 (empty -> .) ]

    parameter                      shift and go to state 34
    empty                          shift and go to state 35

state 12

    (81) assignment -> Identifier . Assign expression
    (73) postfix -> Identifier . LParen expression_list RParen
    (100) primary -> Identifier .

  ! shift/reduce conflict for LParen resolved as shift
    Assign          shift and go to state 36
    LParen          shift and go to state 37
    Mul             reduce using rule 100 (primary -> Identifier .)
    Div             reduce using rule 100 (primary -> Identifier .)
    Mod             reduce using rule 100 (primary -> Identifier .)
    Plus            reduce using rule 100 (primary -> Identifier .)
    Minus           reduce using rule 100 (primary -> Identifier .)
    Less            reduce using rule 100 (primary -> Identifier .)
    Greater         reduce using rule 100 (primary -> Identifier .)
    LessEqual       reduce using rule 100 (primary -> Identifier .)
    GreaterEqual    reduce using rule 100 (primary -> Identifier .)
    NotEqual        reduce using rule 100 (primary -> Identifier .)
    Equal           reduce using rule 100 (primary -> Identifier .)
    BitAnd          reduce using rule 100 (primary -> Identifier .)
    Xor             reduce using rule 100 (primary -> Identifier .)
    BitOr           reduce using rule 100 (primary -> Identifier .)
    And             reduce using rule 100 (primary -> Identifier .)
    Question        reduce using rule 100 (primary -> Identifier .)
    Or              reduce using rule 100 (primary -> Identifier .)
    Semi            reduce using rule 100 (primary -> Identifier .)
    RParen          reduce using rule 100 (primary -> Identifier .)
    Comma           reduce using rule 100 (primary -> Identifier .)
    Int             reduce using rule 100 (primary -> Identifier .)
    Colon           reduce using rule 100 (primary -> Identifier .)
    Identifier      reduce using rule 100 (primary -> Identifier .)
    BitNot          reduce using rule 100 (primary -> Identifier .)
    Not             reduce using rule 100 (primary -> Identifier .)
    Integer         reduce using rule 100 (primary -> Identifier .)

  ! LParen          [ reduce using rule 100 (primary -> Identifier .) ]


state 13

    (58) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 58 (declaration -> type Identifier Assign expression .)
    RParen          reduce using rule 58 (declaration -> type Identifier Assign expression .)
    Comma           reduce using rule 58 (declaration -> type Identifier Assign expression .)
    Int             reduce using rule 58 (declaration -> type Identifier Assign expression .)


state 14

    (59) expression -> assignment .

    Semi            reduce using rule 59 (expression -> assignment .)
    RParen          reduce using rule 59 (expression -> assignment .)
    Comma           reduce using rule 59 (expression -> assignment .)
    Int             reduce using rule 59 (expression -> assignment .)
    Colon           reduce using rule 59 (expression -> assignment .)
    Identifier      reduce using rule 59 (expression -> assignment .)
    Minus           reduce using rule 59 (expression -> assignment .)
    BitNot          reduce using rule 59 (expression -> assignment .)
    Not             reduce using rule 59 (expression -> assignment .)
    Integer         reduce using rule 59 (expression -> assignment .)
    LParen          reduce using rule 59 (expression -> assignment .)


state 15

    (60) assignment -> conditional .

    Semi            reduce using rule 60 (assignment -> conditional .)
    RParen          reduce using rule 60 (assignment -> conditional .)
    Comma           reduce using rule 60 (assignment -> conditional .)
    Int             reduce using rule 60 (assignment -> conditional .)
    Colon           reduce using rule 60 (assignment -> conditional .)
    Identifier      reduce using rule 60 (assignment -> conditional .)
    Minus           reduce using rule 60 (assignment -> conditional .)
    BitNot          reduce using rule 60 (assignment -> conditional .)
    Not             reduce using rule 60 (assignment -> conditional .)
    Integer         reduce using rule 60 (assignment -> conditional .)
    LParen          reduce using rule 60 (assignment -> conditional .)


state 16

    (61) conditional -> logical_or .
    (98) conditional -> logical_or . Question expression Colon conditional
    (82) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 61 (conditional -> logical_or .)
    RParen          reduce using rule 61 (conditional -> logical_or .)
    Comma           reduce using rule 61 (conditional -> logical_or .)
    Int             reduce using rule 61 (conditional -> logical_or .)
    Colon           reduce using rule 61 (conditional -> logical_or .)
    Identifier      reduce using rule 61 (conditional -> logical_or .)
    Minus           reduce using rule 61 (conditional -> logical_or .)
    BitNot          reduce using rule 61 (conditional -> logical_or .)
    Not             reduce using rule 61 (conditional -> logical_or .)
    Integer         reduce using rule 61 (conditional -> logical_or .)
    LParen          reduce using rule 61 (conditional -> logical_or .)
    Question        shift and go to state 38
    Or              shift and go to state 39


state 17

    (62) logical_or -> logical_and .
    (83) logical_and -> logical_and . And bit_or

    Question        reduce using rule 62 (logical_or -> logical_and .)
    Or              reduce using rule 62 (logical_or -> logical_and .)
    Semi            reduce using rule 62 (logical_or -> logical_and .)
    RParen          reduce using rule 62 (logical_or -> logical_and .)
    Comma           reduce using rule 62 (logical_or -> logical_and .)
    Int             reduce using rule 62 (logical_or -> logical_and .)
    Colon           reduce using rule 62 (logical_or -> logical_and .)
    Identifier      reduce using rule 62 (logical_or -> logical_and .)
    Minus           reduce using rule 62 (logical_or -> logical_and .)
    BitNot          reduce using rule 62 (logical_or -> logical_and .)
    Not             reduce using rule 62 (logical_or -> logical_and .)
    Integer         reduce using rule 62 (logical_or -> logical_and .)
    LParen          reduce using rule 62 (logical_or -> logical_and .)
    And             shift and go to state 40


state 18

    (63) logical_and -> bit_or .
    (84) bit_or -> bit_or . BitOr xor

    And             reduce using rule 63 (logical_and -> bit_or .)
    Question        reduce using rule 63 (logical_and -> bit_or .)
    Or              reduce using rule 63 (logical_and -> bit_or .)
    Semi            reduce using rule 63 (logical_and -> bit_or .)
    RParen          reduce using rule 63 (logical_and -> bit_or .)
    Comma           reduce using rule 63 (logical_and -> bit_or .)
    Int             reduce using rule 63 (logical_and -> bit_or .)
    Colon           reduce using rule 63 (logical_and -> bit_or .)
    Identifier      reduce using rule 63 (logical_and -> bit_or .)
    Minus           reduce using rule 63 (logical_and -> bit_or .)
    BitNot          reduce using rule 63 (logical_and -> bit_or .)
    Not             reduce using rule 63 (logical_and -> bit_or .)
    Integer         reduce using rule 63 (logical_and -> bit_or .)
    LParen          reduce using rule 63 (logical_and -> bit_or .)
    BitOr           shift and go to state 41


state 19

    (64) bit_or -> xor .
    (85) xor -> xor . Xor bit_and

    BitOr           reduce using rule 64 (bit_or -> xor .)
    And             reduce using rule 64 (bit_or -> xor .)
    Question        reduce using rule 64 (bit_or -> xor .)
    Or              reduce using rule 64 (bit_or -> xor .)
    Semi            reduce using rule 64 (bit_or -> xor .)
    RParen          reduce using rule 64 (bit_or -> xor .)
    Comma           reduce using rule 64 (bit_or -> xor .)
    Int             reduce using rule 64 (bit_or -> xor .)
    Colon           reduce using rule 64 (bit_or -> xor .)
    Identifier      reduce using rule 64 (bit_or -> xor .)
    Minus           reduce using rule 64 (bit_or -> xor .)
    BitNot          reduce using rule 64 (bit_or -> xor .)
    Not             reduce using rule 64 (bit_or -> xor .)
    Integer         reduce using rule 64 (bit_or -> xor .)
    LParen          reduce using rule 64 (bit_or -> xor .)
    Xor             shift and go to state 42


state 20

    (65) xor -> bit_and .
    (86) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 65 (xor -> bit_and .)
    BitOr           reduce using rule 65 (xor -> bit_and .)
    And             reduce using rule 65 (xor -> bit_and .)
    Question        reduce using rule 65 (xor -> bit_and .)
    Or              reduce using rule 65 (xor -> bit_and .)
    Semi            reduce using rule 65 (xor -> bit_and .)
    RParen          reduce using rule 65 (xor -> bit_and .)
    Comma           reduce using rule 65 (xor -> bit_and .)
    Int             reduce using rule 65 (xor -> bit_and .)
    Colon           reduce using rule 65 (xor -> bit_and .)
    Identifier      reduce using rule 65 (xor -> bit_and .)
    Minus           reduce using rule 65 (xor -> bit_and .)
    BitNot          reduce using rule 65 (xor -> bit_and .)
    Not             reduce using rule 65 (xor -> bit_and .)
    Integer         reduce using rule 65 (xor -> bit_and .)
    LParen          reduce using rule 65 (xor -> bit_and .)
    BitAnd          shift and go to state 43


state 21

    (66) bit_and -> equality .
    (87) equality -> equality . NotEqual relational
    (88) equality -> equality . Equal relational

    BitAnd          reduce using rule 66 (bit_and -> equality .)
    Xor             reduce using rule 66 (bit_and -> equality .)
    BitOr           reduce using rule 66 (bit_and -> equality .)
    And             reduce using rule 66 (bit_and -> equality .)
    Question        reduce using rule 66 (bit_and -> equality .)
    Or              reduce using rule 66 (bit_and -> equality .)
    Semi            reduce using rule 66 (bit_and -> equality .)
    RParen          reduce using rule 66 (bit_and -> equality .)
    Comma           reduce using rule 66 (bit_and -> equality .)
    Int             reduce using rule 66 (bit_and -> equality .)
    Colon           reduce using rule 66 (bit_and -> equality .)
    Identifier      reduce using rule 66 (bit_and -> equality .)
    Minus           reduce using rule 66 (bit_and -> equality .)
    BitNot          reduce using rule 66 (bit_and -> equality .)
    Not             reduce using rule 66 (bit_and -> equality .)
    Integer         reduce using rule 66 (bit_and -> equality .)
    LParen          reduce using rule 66 (bit_and -> equality .)
    NotEqual        shift and go to state 44
    Equal           shift and go to state 45


state 22

    (67) equality -> relational .
    (89) relational -> relational . Less additive
    (90) relational -> relational . Greater additive
    (91) relational -> relational . LessEqual additive
    (92) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 67 (equality -> relational .)
    Equal           reduce using rule 67 (equality -> relational .)
    BitAnd          reduce using rule 67 (equality -> relational .)
    Xor             reduce using rule 67 (equality -> relational .)
    BitOr           reduce using rule 67 (equality -> relational .)
    And             reduce using rule 67 (equality -> relational .)
    Question        reduce using rule 67 (equality -> relational .)
    Or              reduce using rule 67 (equality -> relational .)
    Semi            reduce using rule 67 (equality -> relational .)
    RParen          reduce using rule 67 (equality -> relational .)
    Comma           reduce using rule 67 (equality -> relational .)
    Int             reduce using rule 67 (equality -> relational .)
    Colon           reduce using rule 67 (equality -> relational .)
    Identifier      reduce using rule 67 (equality -> relational .)
    Minus           reduce using rule 67 (equality -> relational .)
    BitNot          reduce using rule 67 (equality -> relational .)
    Not             reduce using rule 67 (equality -> relational .)
    Integer         reduce using rule 67 (equality -> relational .)
    LParen          reduce using rule 67 (equality -> relational .)
    Less            shift and go to state 46
    Greater         shift and go to state 47
    LessEqual       shift and go to state 48
    GreaterEqual    shift and go to state 49


state 23

    (68) relational -> additive .
    (93) additive -> additive . Plus multiplicative
    (94) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 68 (relational -> additive .)
    Greater         reduce using rule 68 (relational -> additive .)
    LessEqual       reduce using rule 68 (relational -> additive .)
    GreaterEqual    reduce using rule 68 (relational -> additive .)
    NotEqual        reduce using rule 68 (relational -> additive .)
    Equal           reduce using rule 68 (relational -> additive .)
    BitAnd          reduce using rule 68 (relational -> additive .)
    Xor             reduce using rule 68 (relational -> additive .)
    BitOr           reduce using rule 68 (relational -> additive .)
    And             reduce using rule 68 (relational -> additive .)
    Question        reduce using rule 68 (relational -> additive .)
    Or              reduce using rule 68 (relational -> additive .)
    Semi            reduce using rule 68 (relational -> additive .)
    RParen          reduce using rule 68 (relational -> additive .)
    Comma           reduce using rule 68 (relational -> additive .)
    Int             reduce using rule 68 (relational -> additive .)
    Colon           reduce using rule 68 (relational -> additive .)
    Identifier      reduce using rule 68 (relational -> additive .)
    BitNot          reduce using rule 68 (relational -> additive .)
    Not             reduce using rule 68 (relational -> additive .)
    Integer         reduce using rule 68 (relational -> additive .)
    LParen          reduce using rule 68 (relational -> additive .)
    Plus            shift and go to state 50
    Minus           shift and go to state 51

  ! Minus           [ reduce using rule 68 (relational -> additive .) ]


state 24

    (69) additive -> multiplicative .
    (95) multiplicative -> multiplicative . Mul unary
    (96) multiplicative -> multiplicative . Div unary
    (97) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 69 (additive -> multiplicative .)
    Minus           reduce using rule 69 (additive -> multiplicative .)
    Less            reduce using rule 69 (additive -> multiplicative .)
    Greater         reduce using rule 69 (additive -> multiplicative .)
    LessEqual       reduce using rule 69 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 69 (additive -> multiplicative .)
    NotEqual        reduce using rule 69 (additive -> multiplicative .)
    Equal           reduce using rule 69 (additive -> multiplicative .)
    BitAnd          reduce using rule 69 (additive -> multiplicative .)
    Xor             reduce using rule 69 (additive -> multiplicative .)
    BitOr           reduce using rule 69 (additive -> multiplicative .)
    And             reduce using rule 69 (additive -> multiplicative .)
    Question        reduce using rule 69 (additive -> multiplicative .)
    Or              reduce using rule 69 (additive -> multiplicative .)
    Semi            reduce using rule 69 (additive -> multiplicative .)
    RParen          reduce using rule 69 (additive -> multiplicative .)
    Comma           reduce using rule 69 (additive -> multiplicative .)
    Int             reduce using rule 69 (additive -> multiplicative .)
    Colon           reduce using rule 69 (additive -> multiplicative .)
    Identifier      reduce using rule 69 (additive -> multiplicative .)
    BitNot          reduce using rule 69 (additive -> multiplicative .)
    Not             reduce using rule 69 (additive -> multiplicative .)
    Integer         reduce using rule 69 (additive -> multiplicative .)
    LParen          reduce using rule 69 (additive -> multiplicative .)
    Mul             shift and go to state 52
    Div             shift and go to state 53
    Mod             shift and go to state 54


state 25

    (78) unary -> Minus . unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    unary                          shift and go to state 55
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 26

    (70) multiplicative -> unary .

    Mul             reduce using rule 70 (multiplicative -> unary .)
    Div             reduce using rule 70 (multiplicative -> unary .)
    Mod             reduce using rule 70 (multiplicative -> unary .)
    Plus            reduce using rule 70 (multiplicative -> unary .)
    Minus           reduce using rule 70 (multiplicative -> unary .)
    Less            reduce using rule 70 (multiplicative -> unary .)
    Greater         reduce using rule 70 (multiplicative -> unary .)
    LessEqual       reduce using rule 70 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 70 (multiplicative -> unary .)
    NotEqual        reduce using rule 70 (multiplicative -> unary .)
    Equal           reduce using rule 70 (multiplicative -> unary .)
    BitAnd          reduce using rule 70 (multiplicative -> unary .)
    Xor             reduce using rule 70 (multiplicative -> unary .)
    BitOr           reduce using rule 70 (multiplicative -> unary .)
    And             reduce using rule 70 (multiplicative -> unary .)
    Question        reduce using rule 70 (multiplicative -> unary .)
    Or              reduce using rule 70 (multiplicative -> unary .)
    Semi            reduce using rule 70 (multiplicative -> unary .)
    RParen          reduce using rule 70 (multiplicative -> unary .)
    Comma           reduce using rule 70 (multiplicative -> unary .)
    Int             reduce using rule 70 (multiplicative -> unary .)
    Colon           reduce using rule 70 (multiplicative -> unary .)
    Identifier      reduce using rule 70 (multiplicative -> unary .)
    BitNot          reduce using rule 70 (multiplicative -> unary .)
    Not             reduce using rule 70 (multiplicative -> unary .)
    Integer         reduce using rule 70 (multiplicative -> unary .)
    LParen          reduce using rule 70 (multiplicative -> unary .)


state 27

    (71) unary -> postfix .

    Mul             reduce using rule 71 (unary -> postfix .)
    Div             reduce using rule 71 (unary -> postfix .)
    Mod             reduce using rule 71 (unary -> postfix .)
    Plus            reduce using rule 71 (unary -> postfix .)
    Minus           reduce using rule 71 (unary -> postfix .)
    Less            reduce using rule 71 (unary -> postfix .)
    Greater         reduce using rule 71 (unary -> postfix .)
    LessEqual       reduce using rule 71 (unary -> postfix .)
    GreaterEqual    reduce using rule 71 (unary -> postfix .)
    NotEqual        reduce using rule 71 (unary -> postfix .)
    Equal           reduce using rule 71 (unary -> postfix .)
    BitAnd          reduce using rule 71 (unary -> postfix .)
    Xor             reduce using rule 71 (unary -> postfix .)
    BitOr           reduce using rule 71 (unary -> postfix .)
    And             reduce using rule 71 (unary -> postfix .)
    Question        reduce using rule 71 (unary -> postfix .)
    Or              reduce using rule 71 (unary -> postfix .)
    Semi            reduce using rule 71 (unary -> postfix .)
    RParen          reduce using rule 71 (unary -> postfix .)
    Comma           reduce using rule 71 (unary -> postfix .)
    Int             reduce using rule 71 (unary -> postfix .)
    Colon           reduce using rule 71 (unary -> postfix .)
    Identifier      reduce using rule 71 (unary -> postfix .)
    BitNot          reduce using rule 71 (unary -> postfix .)
    Not             reduce using rule 71 (unary -> postfix .)
    Integer         reduce using rule 71 (unary -> postfix .)
    LParen          reduce using rule 71 (unary -> postfix .)


state 28

    (79) unary -> BitNot . unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    unary                          shift and go to state 57
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 29

    (80) unary -> Not . unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    unary                          shift and go to state 58
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 30

    (72) postfix -> primary .

    Mul             reduce using rule 72 (postfix -> primary .)
    Div             reduce using rule 72 (postfix -> primary .)
    Mod             reduce using rule 72 (postfix -> primary .)
    Plus            reduce using rule 72 (postfix -> primary .)
    Minus           reduce using rule 72 (postfix -> primary .)
    Less            reduce using rule 72 (postfix -> primary .)
    Greater         reduce using rule 72 (postfix -> primary .)
    LessEqual       reduce using rule 72 (postfix -> primary .)
    GreaterEqual    reduce using rule 72 (postfix -> primary .)
    NotEqual        reduce using rule 72 (postfix -> primary .)
    Equal           reduce using rule 72 (postfix -> primary .)
    BitAnd          reduce using rule 72 (postfix -> primary .)
    Xor             reduce using rule 72 (postfix -> primary .)
    BitOr           reduce using rule 72 (postfix -> primary .)
    And             reduce using rule 72 (postfix -> primary .)
    Question        reduce using rule 72 (postfix -> primary .)
    Or              reduce using rule 72 (postfix -> primary .)
    Semi            reduce using rule 72 (postfix -> primary .)
    RParen          reduce using rule 72 (postfix -> primary .)
    Comma           reduce using rule 72 (postfix -> primary .)
    Int             reduce using rule 72 (postfix -> primary .)
    Colon           reduce using rule 72 (postfix -> primary .)
    Identifier      reduce using rule 72 (postfix -> primary .)
    BitNot          reduce using rule 72 (postfix -> primary .)
    Not             reduce using rule 72 (postfix -> primary .)
    Integer         reduce using rule 72 (postfix -> primary .)
    LParen          reduce using rule 72 (postfix -> primary .)


state 31

    (101) primary -> LParen . expression RParen
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 59
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 32

    (99) primary -> Integer .

    Mul             reduce using rule 99 (primary -> Integer .)
    Div             reduce using rule 99 (primary -> Integer .)
    Mod             reduce using rule 99 (primary -> Integer .)
    Plus            reduce using rule 99 (primary -> Integer .)
    Minus           reduce using rule 99 (primary -> Integer .)
    Less            reduce using rule 99 (primary -> Integer .)
    Greater         reduce using rule 99 (primary -> Integer .)
    LessEqual       reduce using rule 99 (primary -> Integer .)
    GreaterEqual    reduce using rule 99 (primary -> Integer .)
    NotEqual        reduce using rule 99 (primary -> Integer .)
    Equal           reduce using rule 99 (primary -> Integer .)
    BitAnd          reduce using rule 99 (primary -> Integer .)
    Xor             reduce using rule 99 (primary -> Integer .)
    BitOr           reduce using rule 99 (primary -> Integer .)
    And             reduce using rule 99 (primary -> Integer .)
    Question        reduce using rule 99 (primary -> Integer .)
    Or              reduce using rule 99 (primary -> Integer .)
    Semi            reduce using rule 99 (primary -> Integer .)
    RParen          reduce using rule 99 (primary -> Integer .)
    Comma           reduce using rule 99 (primary -> Integer .)
    Int             reduce using rule 99 (primary -> Integer .)
    Colon           reduce using rule 99 (primary -> Integer .)
    Identifier      reduce using rule 99 (primary -> Integer .)
    BitNot          reduce using rule 99 (primary -> Integer .)
    Not             reduce using rule 99 (primary -> Integer .)
    Integer         reduce using rule 99 (primary -> Integer .)
    LParen          reduce using rule 99 (primary -> Integer .)


state 33

    (7) function -> type Identifier LParen RParen . LBrace block RBrace

    LBrace          shift and go to state 60


state 34

    (8) function -> type Identifier LParen parameter . RParen LBrace block RBrace
    (9) parameter -> parameter . parameter_item
    (11) parameter_item -> . Comma declaration
    (12) parameter_item -> . declaration
    (57) declaration -> . type Identifier
    (58) declaration -> . type Identifier Assign expression
    (6) type -> . Int

    RParen          shift and go to state 62
    Comma           shift and go to state 64
    Int             shift and go to state 7

    type                           shift and go to state 61
    parameter_item                 shift and go to state 63
    declaration                    shift and go to state 65

state 35

    (10) parameter -> empty .

    RParen          reduce using rule 10 (parameter -> empty .)
    Comma           reduce using rule 10 (parameter -> empty .)
    Int             reduce using rule 10 (parameter -> empty .)


state 36

    (81) assignment -> Identifier Assign . expression
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 66
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 37

    (73) postfix -> Identifier LParen . expression_list RParen
    (74) expression_list -> . expression_list expression_item
    (75) expression_list -> . empty
    (1) empty -> .

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)

    expression_list                shift and go to state 67
    empty                          shift and go to state 68

state 38

    (98) conditional -> logical_or Question . expression Colon conditional
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    logical_or                     shift and go to state 16
    expression                     shift and go to state 69
    conditional                    shift and go to state 15
    assignment                     shift and go to state 14
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 39

    (82) logical_or -> logical_or Or . logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    logical_and                    shift and go to state 70
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 40

    (83) logical_and -> logical_and And . bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    bit_or                         shift and go to state 71
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 41

    (84) bit_or -> bit_or BitOr . xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    xor                            shift and go to state 72
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 42

    (85) xor -> xor Xor . bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    bit_and                        shift and go to state 73
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 43

    (86) bit_and -> bit_and BitAnd . equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    equality                       shift and go to state 74
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 44

    (87) equality -> equality NotEqual . relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    relational                     shift and go to state 75
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 45

    (88) equality -> equality Equal . relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    relational                     shift and go to state 76
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 46

    (89) relational -> relational Less . additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    additive                       shift and go to state 77
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 47

    (90) relational -> relational Greater . additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    additive                       shift and go to state 78
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 48

    (91) relational -> relational LessEqual . additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    additive                       shift and go to state 79
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 49

    (92) relational -> relational GreaterEqual . additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    additive                       shift and go to state 80
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 50

    (93) additive -> additive Plus . multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    multiplicative                 shift and go to state 81
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 51

    (94) additive -> additive Minus . multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    multiplicative                 shift and go to state 82
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 52

    (95) multiplicative -> multiplicative Mul . unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    unary                          shift and go to state 83
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 53

    (96) multiplicative -> multiplicative Div . unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    unary                          shift and go to state 84
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 54

    (97) multiplicative -> multiplicative Mod . unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    unary                          shift and go to state 85
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 55

    (78) unary -> Minus unary .

    Mul             reduce using rule 78 (unary -> Minus unary .)
    Div             reduce using rule 78 (unary -> Minus unary .)
    Mod             reduce using rule 78 (unary -> Minus unary .)
    Plus            reduce using rule 78 (unary -> Minus unary .)
    Minus           reduce using rule 78 (unary -> Minus unary .)
    Less            reduce using rule 78 (unary -> Minus unary .)
    Greater         reduce using rule 78 (unary -> Minus unary .)
    LessEqual       reduce using rule 78 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 78 (unary -> Minus unary .)
    NotEqual        reduce using rule 78 (unary -> Minus unary .)
    Equal           reduce using rule 78 (unary -> Minus unary .)
    BitAnd          reduce using rule 78 (unary -> Minus unary .)
    Xor             reduce using rule 78 (unary -> Minus unary .)
    BitOr           reduce using rule 78 (unary -> Minus unary .)
    And             reduce using rule 78 (unary -> Minus unary .)
    Question        reduce using rule 78 (unary -> Minus unary .)
    Or              reduce using rule 78 (unary -> Minus unary .)
    Semi            reduce using rule 78 (unary -> Minus unary .)
    RParen          reduce using rule 78 (unary -> Minus unary .)
    Comma           reduce using rule 78 (unary -> Minus unary .)
    Int             reduce using rule 78 (unary -> Minus unary .)
    Colon           reduce using rule 78 (unary -> Minus unary .)
    Identifier      reduce using rule 78 (unary -> Minus unary .)
    BitNot          reduce using rule 78 (unary -> Minus unary .)
    Not             reduce using rule 78 (unary -> Minus unary .)
    Integer         reduce using rule 78 (unary -> Minus unary .)
    LParen          reduce using rule 78 (unary -> Minus unary .)


state 56

    (73) postfix -> Identifier . LParen expression_list RParen
    (100) primary -> Identifier .

  ! shift/reduce conflict for LParen resolved as shift
    LParen          shift and go to state 37
    Mul             reduce using rule 100 (primary -> Identifier .)
    Div             reduce using rule 100 (primary -> Identifier .)
    Mod             reduce using rule 100 (primary -> Identifier .)
    Plus            reduce using rule 100 (primary -> Identifier .)
    Minus           reduce using rule 100 (primary -> Identifier .)
    Less            reduce using rule 100 (primary -> Identifier .)
    Greater         reduce using rule 100 (primary -> Identifier .)
    LessEqual       reduce using rule 100 (primary -> Identifier .)
    GreaterEqual    reduce using rule 100 (primary -> Identifier .)
    NotEqual        reduce using rule 100 (primary -> Identifier .)
    Equal           reduce using rule 100 (primary -> Identifier .)
    BitAnd          reduce using rule 100 (primary -> Identifier .)
    Xor             reduce using rule 100 (primary -> Identifier .)
    BitOr           reduce using rule 100 (primary -> Identifier .)
    And             reduce using rule 100 (primary -> Identifier .)
    Question        reduce using rule 100 (primary -> Identifier .)
    Or              reduce using rule 100 (primary -> Identifier .)
    Semi            reduce using rule 100 (primary -> Identifier .)
    RParen          reduce using rule 100 (primary -> Identifier .)
    Comma           reduce using rule 100 (primary -> Identifier .)
    Int             reduce using rule 100 (primary -> Identifier .)
    Colon           reduce using rule 100 (primary -> Identifier .)
    Identifier      reduce using rule 100 (primary -> Identifier .)
    BitNot          reduce using rule 100 (primary -> Identifier .)
    Not             reduce using rule 100 (primary -> Identifier .)
    Integer         reduce using rule 100 (primary -> Identifier .)

  ! LParen          [ reduce using rule 100 (primary -> Identifier .) ]


state 57

    (79) unary -> BitNot unary .

    Mul             reduce using rule 79 (unary -> BitNot unary .)
    Div             reduce using rule 79 (unary -> BitNot unary .)
    Mod             reduce using rule 79 (unary -> BitNot unary .)
    Plus            reduce using rule 79 (unary -> BitNot unary .)
    Minus           reduce using rule 79 (unary -> BitNot unary .)
    Less            reduce using rule 79 (unary -> BitNot unary .)
    Greater         reduce using rule 79 (unary -> BitNot unary .)
    LessEqual       reduce using rule 79 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 79 (unary -> BitNot unary .)
    NotEqual        reduce using rule 79 (unary -> BitNot unary .)
    Equal           reduce using rule 79 (unary -> BitNot unary .)
    BitAnd          reduce using rule 79 (unary -> BitNot unary .)
    Xor             reduce using rule 79 (unary -> BitNot unary .)
    BitOr           reduce using rule 79 (unary -> BitNot unary .)
    And             reduce using rule 79 (unary -> BitNot unary .)
    Question        reduce using rule 79 (unary -> BitNot unary .)
    Or              reduce using rule 79 (unary -> BitNot unary .)
    Semi            reduce using rule 79 (unary -> BitNot unary .)
    RParen          reduce using rule 79 (unary -> BitNot unary .)
    Comma           reduce using rule 79 (unary -> BitNot unary .)
    Int             reduce using rule 79 (unary -> BitNot unary .)
    Colon           reduce using rule 79 (unary -> BitNot unary .)
    Identifier      reduce using rule 79 (unary -> BitNot unary .)
    BitNot          reduce using rule 79 (unary -> BitNot unary .)
    Not             reduce using rule 79 (unary -> BitNot unary .)
    Integer         reduce using rule 79 (unary -> BitNot unary .)
    LParen          reduce using rule 79 (unary -> BitNot unary .)


state 58

    (80) unary -> Not unary .

    Mul             reduce using rule 80 (unary -> Not unary .)
    Div             reduce using rule 80 (unary -> Not unary .)
    Mod             reduce using rule 80 (unary -> Not unary .)
    Plus            reduce using rule 80 (unary -> Not unary .)
    Minus           reduce using rule 80 (unary -> Not unary .)
    Less            reduce using rule 80 (unary -> Not unary .)
    Greater         reduce using rule 80 (unary -> Not unary .)
    LessEqual       reduce using rule 80 (unary -> Not unary .)
    GreaterEqual    reduce using rule 80 (unary -> Not unary .)
    NotEqual        reduce using rule 80 (unary -> Not unary .)
    Equal           reduce using rule 80 (unary -> Not unary .)
    BitAnd          reduce using rule 80 (unary -> Not unary .)
    Xor             reduce using rule 80 (unary -> Not unary .)
    BitOr           reduce using rule 80 (unary -> Not unary .)
    And             reduce using rule 80 (unary -> Not unary .)
    Question        reduce using rule 80 (unary -> Not unary .)
    Or              reduce using rule 80 (unary -> Not unary .)
    Semi            reduce using rule 80 (unary -> Not unary .)
    RParen          reduce using rule 80 (unary -> Not unary .)
    Comma           reduce using rule 80 (unary -> Not unary .)
    Int             reduce using rule 80 (unary -> Not unary .)
    Colon           reduce using rule 80 (unary -> Not unary .)
    Identifier      reduce using rule 80 (unary -> Not unary .)
    BitNot          reduce using rule 80 (unary -> Not unary .)
    Not             reduce using rule 80 (unary -> Not unary .)
    Integer         reduce using rule 80 (unary -> Not unary .)
    LParen          reduce using rule 80 (unary -> Not unary .)


state 59

    (101) primary -> LParen expression . RParen

    RParen          shift and go to state 86


state 60

    (7) function -> type Identifier LParen RParen LBrace . block RBrace
    (13) block -> . block block_item
    (14) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 87
    empty                          shift and go to state 88

state 61

    (57) declaration -> type . Identifier
    (58) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 89


state 62

    (8) function -> type Identifier LParen parameter RParen . LBrace block RBrace

    LBrace          shift and go to state 90


state 63

    (9) parameter -> parameter parameter_item .

    RParen          reduce using rule 9 (parameter -> parameter parameter_item .)
    Comma           reduce using rule 9 (parameter -> parameter parameter_item .)
    Int             reduce using rule 9 (parameter -> parameter parameter_item .)


state 64

    (11) parameter_item -> Comma . declaration
    (57) declaration -> . type Identifier
    (58) declaration -> . type Identifier Assign expression
    (6) type -> . Int

    Int             shift and go to state 7

    declaration                    shift and go to state 91
    type                           shift and go to state 61

state 65

    (12) parameter_item -> declaration .

    RParen          reduce using rule 12 (parameter_item -> declaration .)
    Comma           reduce using rule 12 (parameter_item -> declaration .)
    Int             reduce using rule 12 (parameter_item -> declaration .)


state 66

    (81) assignment -> Identifier Assign expression .

    Semi            reduce using rule 81 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 81 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 81 (assignment -> Identifier Assign expression .)
    Int             reduce using rule 81 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 81 (assignment -> Identifier Assign expression .)
    Identifier      reduce using rule 81 (assignment -> Identifier Assign expression .)
    Minus           reduce using rule 81 (assignment -> Identifier Assign expression .)
    BitNot          reduce using rule 81 (assignment -> Identifier Assign expression .)
    Not             reduce using rule 81 (assignment -> Identifier Assign expression .)
    Integer         reduce using rule 81 (assignment -> Identifier Assign expression .)
    LParen          reduce using rule 81 (assignment -> Identifier Assign expression .)


state 67

    (73) postfix -> Identifier LParen expression_list . RParen
    (74) expression_list -> expression_list . expression_item
    (76) expression_item -> . Comma expression
    (77) expression_item -> . expression
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RParen          shift and go to state 92
    Comma           shift and go to state 94
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression_item                shift and go to state 93
    expression                     shift and go to state 95
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 68

    (75) expression_list -> empty .

    RParen          reduce using rule 75 (expression_list -> empty .)
    Comma           reduce using rule 75 (expression_list -> empty .)
    Identifier      reduce using rule 75 (expression_list -> empty .)
    Minus           reduce using rule 75 (expression_list -> empty .)
    BitNot          reduce using rule 75 (expression_list -> empty .)
    Not             reduce using rule 75 (expression_list -> empty .)
    Integer         reduce using rule 75 (expression_list -> empty .)
    LParen          reduce using rule 75 (expression_list -> empty .)


state 69

    (98) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 96


state 70

    (82) logical_or -> logical_or Or logical_and .
    (83) logical_and -> logical_and . And bit_or

    Question        reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Int             reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Identifier      reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Minus           reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    BitNot          reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Not             reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    Integer         reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    LParen          reduce using rule 82 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 40


state 71

    (83) logical_and -> logical_and And bit_or .
    (84) bit_or -> bit_or . BitOr xor

    And             reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 83 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Int             reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Identifier      reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Minus           reduce using rule 83 (logical_and -> logical_and And bit_or .)
    BitNot          reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Not             reduce using rule 83 (logical_and -> logical_and And bit_or .)
    Integer         reduce using rule 83 (logical_and -> logical_and And bit_or .)
    LParen          reduce using rule 83 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 41


state 72

    (84) bit_or -> bit_or BitOr xor .
    (85) xor -> xor . Xor bit_and

    BitOr           reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Int             reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Identifier      reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Minus           reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    BitNot          reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Not             reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Integer         reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    LParen          reduce using rule 84 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 42


state 73

    (85) xor -> xor Xor bit_and .
    (86) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 85 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 85 (xor -> xor Xor bit_and .)
    And             reduce using rule 85 (xor -> xor Xor bit_and .)
    Question        reduce using rule 85 (xor -> xor Xor bit_and .)
    Or              reduce using rule 85 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 85 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 85 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 85 (xor -> xor Xor bit_and .)
    Int             reduce using rule 85 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 85 (xor -> xor Xor bit_and .)
    Identifier      reduce using rule 85 (xor -> xor Xor bit_and .)
    Minus           reduce using rule 85 (xor -> xor Xor bit_and .)
    BitNot          reduce using rule 85 (xor -> xor Xor bit_and .)
    Not             reduce using rule 85 (xor -> xor Xor bit_and .)
    Integer         reduce using rule 85 (xor -> xor Xor bit_and .)
    LParen          reduce using rule 85 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 43


state 74

    (86) bit_and -> bit_and BitAnd equality .
    (87) equality -> equality . NotEqual relational
    (88) equality -> equality . Equal relational

    BitAnd          reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Int             reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Identifier      reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Minus           reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    BitNot          reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Not             reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    Integer         reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    LParen          reduce using rule 86 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 44
    Equal           shift and go to state 45


state 75

    (87) equality -> equality NotEqual relational .
    (89) relational -> relational . Less additive
    (90) relational -> relational . Greater additive
    (91) relational -> relational . LessEqual additive
    (92) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 87 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 87 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 87 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 87 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 87 (equality -> equality NotEqual relational .)
    And             reduce using rule 87 (equality -> equality NotEqual relational .)
    Question        reduce using rule 87 (equality -> equality NotEqual relational .)
    Or              reduce using rule 87 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 87 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 87 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 87 (equality -> equality NotEqual relational .)
    Int             reduce using rule 87 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 87 (equality -> equality NotEqual relational .)
    Identifier      reduce using rule 87 (equality -> equality NotEqual relational .)
    Minus           reduce using rule 87 (equality -> equality NotEqual relational .)
    BitNot          reduce using rule 87 (equality -> equality NotEqual relational .)
    Not             reduce using rule 87 (equality -> equality NotEqual relational .)
    Integer         reduce using rule 87 (equality -> equality NotEqual relational .)
    LParen          reduce using rule 87 (equality -> equality NotEqual relational .)
    Less            shift and go to state 46
    Greater         shift and go to state 47
    LessEqual       shift and go to state 48
    GreaterEqual    shift and go to state 49


state 76

    (88) equality -> equality Equal relational .
    (89) relational -> relational . Less additive
    (90) relational -> relational . Greater additive
    (91) relational -> relational . LessEqual additive
    (92) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 88 (equality -> equality Equal relational .)
    Equal           reduce using rule 88 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 88 (equality -> equality Equal relational .)
    Xor             reduce using rule 88 (equality -> equality Equal relational .)
    BitOr           reduce using rule 88 (equality -> equality Equal relational .)
    And             reduce using rule 88 (equality -> equality Equal relational .)
    Question        reduce using rule 88 (equality -> equality Equal relational .)
    Or              reduce using rule 88 (equality -> equality Equal relational .)
    Semi            reduce using rule 88 (equality -> equality Equal relational .)
    RParen          reduce using rule 88 (equality -> equality Equal relational .)
    Comma           reduce using rule 88 (equality -> equality Equal relational .)
    Int             reduce using rule 88 (equality -> equality Equal relational .)
    Colon           reduce using rule 88 (equality -> equality Equal relational .)
    Identifier      reduce using rule 88 (equality -> equality Equal relational .)
    Minus           reduce using rule 88 (equality -> equality Equal relational .)
    BitNot          reduce using rule 88 (equality -> equality Equal relational .)
    Not             reduce using rule 88 (equality -> equality Equal relational .)
    Integer         reduce using rule 88 (equality -> equality Equal relational .)
    LParen          reduce using rule 88 (equality -> equality Equal relational .)
    Less            shift and go to state 46
    Greater         shift and go to state 47
    LessEqual       shift and go to state 48
    GreaterEqual    shift and go to state 49


state 77

    (89) relational -> relational Less additive .
    (93) additive -> additive . Plus multiplicative
    (94) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 89 (relational -> relational Less additive .)
    Greater         reduce using rule 89 (relational -> relational Less additive .)
    LessEqual       reduce using rule 89 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 89 (relational -> relational Less additive .)
    NotEqual        reduce using rule 89 (relational -> relational Less additive .)
    Equal           reduce using rule 89 (relational -> relational Less additive .)
    BitAnd          reduce using rule 89 (relational -> relational Less additive .)
    Xor             reduce using rule 89 (relational -> relational Less additive .)
    BitOr           reduce using rule 89 (relational -> relational Less additive .)
    And             reduce using rule 89 (relational -> relational Less additive .)
    Question        reduce using rule 89 (relational -> relational Less additive .)
    Or              reduce using rule 89 (relational -> relational Less additive .)
    Semi            reduce using rule 89 (relational -> relational Less additive .)
    RParen          reduce using rule 89 (relational -> relational Less additive .)
    Comma           reduce using rule 89 (relational -> relational Less additive .)
    Int             reduce using rule 89 (relational -> relational Less additive .)
    Colon           reduce using rule 89 (relational -> relational Less additive .)
    Identifier      reduce using rule 89 (relational -> relational Less additive .)
    BitNot          reduce using rule 89 (relational -> relational Less additive .)
    Not             reduce using rule 89 (relational -> relational Less additive .)
    Integer         reduce using rule 89 (relational -> relational Less additive .)
    LParen          reduce using rule 89 (relational -> relational Less additive .)
    Plus            shift and go to state 50
    Minus           shift and go to state 51

  ! Minus           [ reduce using rule 89 (relational -> relational Less additive .) ]


state 78

    (90) relational -> relational Greater additive .
    (93) additive -> additive . Plus multiplicative
    (94) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 90 (relational -> relational Greater additive .)
    Greater         reduce using rule 90 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 90 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 90 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 90 (relational -> relational Greater additive .)
    Equal           reduce using rule 90 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 90 (relational -> relational Greater additive .)
    Xor             reduce using rule 90 (relational -> relational Greater additive .)
    BitOr           reduce using rule 90 (relational -> relational Greater additive .)
    And             reduce using rule 90 (relational -> relational Greater additive .)
    Question        reduce using rule 90 (relational -> relational Greater additive .)
    Or              reduce using rule 90 (relational -> relational Greater additive .)
    Semi            reduce using rule 90 (relational -> relational Greater additive .)
    RParen          reduce using rule 90 (relational -> relational Greater additive .)
    Comma           reduce using rule 90 (relational -> relational Greater additive .)
    Int             reduce using rule 90 (relational -> relational Greater additive .)
    Colon           reduce using rule 90 (relational -> relational Greater additive .)
    Identifier      reduce using rule 90 (relational -> relational Greater additive .)
    BitNot          reduce using rule 90 (relational -> relational Greater additive .)
    Not             reduce using rule 90 (relational -> relational Greater additive .)
    Integer         reduce using rule 90 (relational -> relational Greater additive .)
    LParen          reduce using rule 90 (relational -> relational Greater additive .)
    Plus            shift and go to state 50
    Minus           shift and go to state 51

  ! Minus           [ reduce using rule 90 (relational -> relational Greater additive .) ]


state 79

    (91) relational -> relational LessEqual additive .
    (93) additive -> additive . Plus multiplicative
    (94) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 91 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 91 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 91 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 91 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 91 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 91 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 91 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 91 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 91 (relational -> relational LessEqual additive .)
    And             reduce using rule 91 (relational -> relational LessEqual additive .)
    Question        reduce using rule 91 (relational -> relational LessEqual additive .)
    Or              reduce using rule 91 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 91 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 91 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 91 (relational -> relational LessEqual additive .)
    Int             reduce using rule 91 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 91 (relational -> relational LessEqual additive .)
    Identifier      reduce using rule 91 (relational -> relational LessEqual additive .)
    BitNot          reduce using rule 91 (relational -> relational LessEqual additive .)
    Not             reduce using rule 91 (relational -> relational LessEqual additive .)
    Integer         reduce using rule 91 (relational -> relational LessEqual additive .)
    LParen          reduce using rule 91 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 50
    Minus           shift and go to state 51

  ! Minus           [ reduce using rule 91 (relational -> relational LessEqual additive .) ]


state 80

    (92) relational -> relational GreaterEqual additive .
    (93) additive -> additive . Plus multiplicative
    (94) additive -> additive . Minus multiplicative

  ! shift/reduce conflict for Minus resolved as shift
    Less            reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 92 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 92 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 92 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 92 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 92 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 92 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 92 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Int             reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Identifier      reduce using rule 92 (relational -> relational GreaterEqual additive .)
    BitNot          reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Not             reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Integer         reduce using rule 92 (relational -> relational GreaterEqual additive .)
    LParen          reduce using rule 92 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 50
    Minus           shift and go to state 51

  ! Minus           [ reduce using rule 92 (relational -> relational GreaterEqual additive .) ]


state 81

    (93) additive -> additive Plus multiplicative .
    (95) multiplicative -> multiplicative . Mul unary
    (96) multiplicative -> multiplicative . Div unary
    (97) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 93 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 93 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 93 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 93 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 93 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 93 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 93 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 93 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 93 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 93 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 93 (additive -> additive Plus multiplicative .)
    And             reduce using rule 93 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 93 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 93 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 93 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 93 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 93 (additive -> additive Plus multiplicative .)
    Int             reduce using rule 93 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 93 (additive -> additive Plus multiplicative .)
    Identifier      reduce using rule 93 (additive -> additive Plus multiplicative .)
    BitNot          reduce using rule 93 (additive -> additive Plus multiplicative .)
    Not             reduce using rule 93 (additive -> additive Plus multiplicative .)
    Integer         reduce using rule 93 (additive -> additive Plus multiplicative .)
    LParen          reduce using rule 93 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 52
    Div             shift and go to state 53
    Mod             shift and go to state 54


state 82

    (94) additive -> additive Minus multiplicative .
    (95) multiplicative -> multiplicative . Mul unary
    (96) multiplicative -> multiplicative . Div unary
    (97) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 94 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 94 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 94 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 94 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 94 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 94 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 94 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 94 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 94 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 94 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 94 (additive -> additive Minus multiplicative .)
    And             reduce using rule 94 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 94 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 94 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 94 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 94 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 94 (additive -> additive Minus multiplicative .)
    Int             reduce using rule 94 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 94 (additive -> additive Minus multiplicative .)
    Identifier      reduce using rule 94 (additive -> additive Minus multiplicative .)
    BitNot          reduce using rule 94 (additive -> additive Minus multiplicative .)
    Not             reduce using rule 94 (additive -> additive Minus multiplicative .)
    Integer         reduce using rule 94 (additive -> additive Minus multiplicative .)
    LParen          reduce using rule 94 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 52
    Div             shift and go to state 53
    Mod             shift and go to state 54


state 83

    (95) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Int             reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Identifier      reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    BitNot          reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Not             reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    Integer         reduce using rule 95 (multiplicative -> multiplicative Mul unary .)
    LParen          reduce using rule 95 (multiplicative -> multiplicative Mul unary .)


state 84

    (96) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Int             reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Identifier      reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    BitNot          reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Not             reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    Integer         reduce using rule 96 (multiplicative -> multiplicative Div unary .)
    LParen          reduce using rule 96 (multiplicative -> multiplicative Div unary .)


state 85

    (97) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Int             reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Identifier      reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    BitNot          reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Not             reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    Integer         reduce using rule 97 (multiplicative -> multiplicative Mod unary .)
    LParen          reduce using rule 97 (multiplicative -> multiplicative Mod unary .)


state 86

    (101) primary -> LParen expression RParen .

    Mul             reduce using rule 101 (primary -> LParen expression RParen .)
    Div             reduce using rule 101 (primary -> LParen expression RParen .)
    Mod             reduce using rule 101 (primary -> LParen expression RParen .)
    Plus            reduce using rule 101 (primary -> LParen expression RParen .)
    Minus           reduce using rule 101 (primary -> LParen expression RParen .)
    Less            reduce using rule 101 (primary -> LParen expression RParen .)
    Greater         reduce using rule 101 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 101 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 101 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 101 (primary -> LParen expression RParen .)
    Equal           reduce using rule 101 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 101 (primary -> LParen expression RParen .)
    Xor             reduce using rule 101 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 101 (primary -> LParen expression RParen .)
    And             reduce using rule 101 (primary -> LParen expression RParen .)
    Question        reduce using rule 101 (primary -> LParen expression RParen .)
    Or              reduce using rule 101 (primary -> LParen expression RParen .)
    Semi            reduce using rule 101 (primary -> LParen expression RParen .)
    RParen          reduce using rule 101 (primary -> LParen expression RParen .)
    Comma           reduce using rule 101 (primary -> LParen expression RParen .)
    Int             reduce using rule 101 (primary -> LParen expression RParen .)
    Colon           reduce using rule 101 (primary -> LParen expression RParen .)
    Identifier      reduce using rule 101 (primary -> LParen expression RParen .)
    BitNot          reduce using rule 101 (primary -> LParen expression RParen .)
    Not             reduce using rule 101 (primary -> LParen expression RParen .)
    Integer         reduce using rule 101 (primary -> LParen expression RParen .)
    LParen          reduce using rule 101 (primary -> LParen expression RParen .)


state 87

    (7) function -> type Identifier LParen RParen LBrace block . RBrace
    (13) block -> block . block_item
    (15) block_item -> . statement
    (16) block_item -> . declaration Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (57) declaration -> . type Identifier
    (58) declaration -> . type Identifier Assign expression
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (6) type -> . Int
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RBrace          shift and go to state 98
    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Int             shift and go to state 7
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    type                           shift and go to state 61
    block_item                     shift and go to state 99
    statement                      shift and go to state 100
    declaration                    shift and go to state 101
    statement_matched              shift and go to state 102
    statement_unmatched            shift and go to state 103
    expression                     shift and go to state 104
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 88

    (14) block -> empty .

    RBrace          reduce using rule 14 (block -> empty .)
    If              reduce using rule 14 (block -> empty .)
    While           reduce using rule 14 (block -> empty .)
    Do              reduce using rule 14 (block -> empty .)
    For             reduce using rule 14 (block -> empty .)
    Return          reduce using rule 14 (block -> empty .)
    LBrace          reduce using rule 14 (block -> empty .)
    Break           reduce using rule 14 (block -> empty .)
    Continue        reduce using rule 14 (block -> empty .)
    Int             reduce using rule 14 (block -> empty .)
    Identifier      reduce using rule 14 (block -> empty .)
    Minus           reduce using rule 14 (block -> empty .)
    BitNot          reduce using rule 14 (block -> empty .)
    Not             reduce using rule 14 (block -> empty .)
    Integer         reduce using rule 14 (block -> empty .)
    LParen          reduce using rule 14 (block -> empty .)
    Semi            reduce using rule 14 (block -> empty .)


state 89

    (57) declaration -> type Identifier .
    (58) declaration -> type Identifier . Assign expression

    RParen          reduce using rule 57 (declaration -> type Identifier .)
    Comma           reduce using rule 57 (declaration -> type Identifier .)
    Int             reduce using rule 57 (declaration -> type Identifier .)
    Semi            reduce using rule 57 (declaration -> type Identifier .)
    Assign          shift and go to state 10


state 90

    (8) function -> type Identifier LParen parameter RParen LBrace . block RBrace
    (13) block -> . block block_item
    (14) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 114
    empty                          shift and go to state 88

state 91

    (11) parameter_item -> Comma declaration .

    RParen          reduce using rule 11 (parameter_item -> Comma declaration .)
    Comma           reduce using rule 11 (parameter_item -> Comma declaration .)
    Int             reduce using rule 11 (parameter_item -> Comma declaration .)


state 92

    (73) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Int             reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Identifier      reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    BitNot          reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Not             reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    Integer         reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)
    LParen          reduce using rule 73 (postfix -> Identifier LParen expression_list RParen .)


state 93

    (74) expression_list -> expression_list expression_item .

    RParen          reduce using rule 74 (expression_list -> expression_list expression_item .)
    Comma           reduce using rule 74 (expression_list -> expression_list expression_item .)
    Identifier      reduce using rule 74 (expression_list -> expression_list expression_item .)
    Minus           reduce using rule 74 (expression_list -> expression_list expression_item .)
    BitNot          reduce using rule 74 (expression_list -> expression_list expression_item .)
    Not             reduce using rule 74 (expression_list -> expression_list expression_item .)
    Integer         reduce using rule 74 (expression_list -> expression_list expression_item .)
    LParen          reduce using rule 74 (expression_list -> expression_list expression_item .)


state 94

    (76) expression_item -> Comma . expression
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 115
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 95

    (77) expression_item -> expression .

    RParen          reduce using rule 77 (expression_item -> expression .)
    Comma           reduce using rule 77 (expression_item -> expression .)
    Identifier      reduce using rule 77 (expression_item -> expression .)
    Minus           reduce using rule 77 (expression_item -> expression .)
    BitNot          reduce using rule 77 (expression_item -> expression .)
    Not             reduce using rule 77 (expression_item -> expression .)
    Integer         reduce using rule 77 (expression_item -> expression .)
    LParen          reduce using rule 77 (expression_item -> expression .)


state 96

    (98) conditional -> logical_or Question expression Colon . conditional
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Identifier      shift and go to state 56
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    logical_or                     shift and go to state 16
    conditional                    shift and go to state 116
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 97

    (52) statement_matched -> LBrace . block RBrace
    (13) block -> . block block_item
    (14) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 117
    empty                          shift and go to state 88

state 98

    (7) function -> type Identifier LParen RParen LBrace block RBrace .

    Int             reduce using rule 7 (function -> type Identifier LParen RParen LBrace block RBrace .)
    $end            reduce using rule 7 (function -> type Identifier LParen RParen LBrace block RBrace .)


state 99

    (13) block -> block block_item .

    RBrace          reduce using rule 13 (block -> block block_item .)
    If              reduce using rule 13 (block -> block block_item .)
    While           reduce using rule 13 (block -> block block_item .)
    Do              reduce using rule 13 (block -> block block_item .)
    For             reduce using rule 13 (block -> block block_item .)
    Return          reduce using rule 13 (block -> block block_item .)
    LBrace          reduce using rule 13 (block -> block block_item .)
    Break           reduce using rule 13 (block -> block block_item .)
    Continue        reduce using rule 13 (block -> block block_item .)
    Int             reduce using rule 13 (block -> block block_item .)
    Identifier      reduce using rule 13 (block -> block block_item .)
    Minus           reduce using rule 13 (block -> block block_item .)
    BitNot          reduce using rule 13 (block -> block block_item .)
    Not             reduce using rule 13 (block -> block block_item .)
    Integer         reduce using rule 13 (block -> block block_item .)
    LParen          reduce using rule 13 (block -> block block_item .)
    Semi            reduce using rule 13 (block -> block block_item .)


state 100

    (15) block_item -> statement .

    RBrace          reduce using rule 15 (block_item -> statement .)
    If              reduce using rule 15 (block_item -> statement .)
    While           reduce using rule 15 (block_item -> statement .)
    Do              reduce using rule 15 (block_item -> statement .)
    For             reduce using rule 15 (block_item -> statement .)
    Return          reduce using rule 15 (block_item -> statement .)
    LBrace          reduce using rule 15 (block_item -> statement .)
    Break           reduce using rule 15 (block_item -> statement .)
    Continue        reduce using rule 15 (block_item -> statement .)
    Int             reduce using rule 15 (block_item -> statement .)
    Identifier      reduce using rule 15 (block_item -> statement .)
    Minus           reduce using rule 15 (block_item -> statement .)
    BitNot          reduce using rule 15 (block_item -> statement .)
    Not             reduce using rule 15 (block_item -> statement .)
    Integer         reduce using rule 15 (block_item -> statement .)
    LParen          reduce using rule 15 (block_item -> statement .)
    Semi            reduce using rule 15 (block_item -> statement .)


state 101

    (16) block_item -> declaration . Semi

    Semi            shift and go to state 118


state 102

    (17) statement -> statement_matched .

    RBrace          reduce using rule 17 (statement -> statement_matched .)
    If              reduce using rule 17 (statement -> statement_matched .)
    While           reduce using rule 17 (statement -> statement_matched .)
    Do              reduce using rule 17 (statement -> statement_matched .)
    For             reduce using rule 17 (statement -> statement_matched .)
    Return          reduce using rule 17 (statement -> statement_matched .)
    LBrace          reduce using rule 17 (statement -> statement_matched .)
    Break           reduce using rule 17 (statement -> statement_matched .)
    Continue        reduce using rule 17 (statement -> statement_matched .)
    Int             reduce using rule 17 (statement -> statement_matched .)
    Identifier      reduce using rule 17 (statement -> statement_matched .)
    Minus           reduce using rule 17 (statement -> statement_matched .)
    BitNot          reduce using rule 17 (statement -> statement_matched .)
    Not             reduce using rule 17 (statement -> statement_matched .)
    Integer         reduce using rule 17 (statement -> statement_matched .)
    LParen          reduce using rule 17 (statement -> statement_matched .)
    Semi            reduce using rule 17 (statement -> statement_matched .)


state 103

    (18) statement -> statement_unmatched .

    RBrace          reduce using rule 18 (statement -> statement_unmatched .)
    If              reduce using rule 18 (statement -> statement_unmatched .)
    While           reduce using rule 18 (statement -> statement_unmatched .)
    Do              reduce using rule 18 (statement -> statement_unmatched .)
    For             reduce using rule 18 (statement -> statement_unmatched .)
    Return          reduce using rule 18 (statement -> statement_unmatched .)
    LBrace          reduce using rule 18 (statement -> statement_unmatched .)
    Break           reduce using rule 18 (statement -> statement_unmatched .)
    Continue        reduce using rule 18 (statement -> statement_unmatched .)
    Int             reduce using rule 18 (statement -> statement_unmatched .)
    Identifier      reduce using rule 18 (statement -> statement_unmatched .)
    Minus           reduce using rule 18 (statement -> statement_unmatched .)
    BitNot          reduce using rule 18 (statement -> statement_unmatched .)
    Not             reduce using rule 18 (statement -> statement_unmatched .)
    Integer         reduce using rule 18 (statement -> statement_unmatched .)
    LParen          reduce using rule 18 (statement -> statement_unmatched .)
    Semi            reduce using rule 18 (statement -> statement_unmatched .)


state 104

    (55) opt_expression -> expression .

    Semi            reduce using rule 55 (opt_expression -> expression .)


state 105

    (19) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 119


state 106

    (22) statement_matched -> While . LParen expression RParen statement_matched
    (23) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 120


state 107

    (24) statement_matched -> Do . statement_matched While expression Semi
    (25) statement_unmatched -> Do . statement_unmatched While expression Semi
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    statement_matched              shift and go to state 121
    expression                     shift and go to state 104
    statement_unmatched            shift and go to state 122
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 108

    (26) statement_matched -> For . LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> For . LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> For . LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> For . LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> For . LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> For . LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> For . LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> For . LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> For . LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> For . LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> For . LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> For . LParen Semi Semi RParen statement_matched
    (28) statement_unmatched -> For . LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> For . LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> For . LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For . LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For . LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For . LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> For . LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For . LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> For . LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> For . LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> For . LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> For . LParen Semi Semi RParen statement_unmatched

    LParen          shift and go to state 123


state 109

    (50) statement_matched -> Return . expression Semi
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 124
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 110

    (51) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 125


state 111

    (53) statement_matched -> Break . Semi

    Semi            shift and go to state 126


state 112

    (54) statement_matched -> Continue . Semi

    Semi            shift and go to state 127


state 113

    (56) opt_expression -> empty .

    Semi            reduce using rule 56 (opt_expression -> empty .)


state 114

    (8) function -> type Identifier LParen parameter RParen LBrace block . RBrace
    (13) block -> block . block_item
    (15) block_item -> . statement
    (16) block_item -> . declaration Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (57) declaration -> . type Identifier
    (58) declaration -> . type Identifier Assign expression
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (6) type -> . Int
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RBrace          shift and go to state 128
    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Int             shift and go to state 7
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    type                           shift and go to state 61
    block_item                     shift and go to state 99
    statement                      shift and go to state 100
    declaration                    shift and go to state 101
    statement_matched              shift and go to state 102
    statement_unmatched            shift and go to state 103
    expression                     shift and go to state 104
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 115

    (76) expression_item -> Comma expression .

    RParen          reduce using rule 76 (expression_item -> Comma expression .)
    Comma           reduce using rule 76 (expression_item -> Comma expression .)
    Identifier      reduce using rule 76 (expression_item -> Comma expression .)
    Minus           reduce using rule 76 (expression_item -> Comma expression .)
    BitNot          reduce using rule 76 (expression_item -> Comma expression .)
    Not             reduce using rule 76 (expression_item -> Comma expression .)
    Integer         reduce using rule 76 (expression_item -> Comma expression .)
    LParen          reduce using rule 76 (expression_item -> Comma expression .)


state 116

    (98) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    Int             reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    Identifier      reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    Minus           reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    BitNot          reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    Not             reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    Integer         reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)
    LParen          reduce using rule 98 (conditional -> logical_or Question expression Colon conditional .)


state 117

    (52) statement_matched -> LBrace block . RBrace
    (13) block -> block . block_item
    (15) block_item -> . statement
    (16) block_item -> . declaration Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (57) declaration -> . type Identifier
    (58) declaration -> . type Identifier Assign expression
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (6) type -> . Int
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RBrace          shift and go to state 129
    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Int             shift and go to state 7
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    block_item                     shift and go to state 99
    statement                      shift and go to state 100
    declaration                    shift and go to state 101
    statement_matched              shift and go to state 102
    statement_unmatched            shift and go to state 103
    type                           shift and go to state 61
    expression                     shift and go to state 104
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 118

    (16) block_item -> declaration Semi .

    RBrace          reduce using rule 16 (block_item -> declaration Semi .)
    If              reduce using rule 16 (block_item -> declaration Semi .)
    While           reduce using rule 16 (block_item -> declaration Semi .)
    Do              reduce using rule 16 (block_item -> declaration Semi .)
    For             reduce using rule 16 (block_item -> declaration Semi .)
    Return          reduce using rule 16 (block_item -> declaration Semi .)
    LBrace          reduce using rule 16 (block_item -> declaration Semi .)
    Break           reduce using rule 16 (block_item -> declaration Semi .)
    Continue        reduce using rule 16 (block_item -> declaration Semi .)
    Int             reduce using rule 16 (block_item -> declaration Semi .)
    Identifier      reduce using rule 16 (block_item -> declaration Semi .)
    Minus           reduce using rule 16 (block_item -> declaration Semi .)
    BitNot          reduce using rule 16 (block_item -> declaration Semi .)
    Not             reduce using rule 16 (block_item -> declaration Semi .)
    Integer         reduce using rule 16 (block_item -> declaration Semi .)
    LParen          reduce using rule 16 (block_item -> declaration Semi .)
    Semi            reduce using rule 16 (block_item -> declaration Semi .)


state 119

    (19) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen . expression RParen statement
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 130
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 120

    (22) statement_matched -> While LParen . expression RParen statement_matched
    (23) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 131
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 121

    (24) statement_matched -> Do statement_matched . While expression Semi

    While           shift and go to state 132


state 122

    (25) statement_unmatched -> Do statement_unmatched . While expression Semi

    While           shift and go to state 133


state 123

    (26) statement_matched -> For LParen . expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> For LParen . declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> For LParen . Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> For LParen . expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> For LParen . declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> For LParen . expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> For LParen . declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> For LParen . expression Semi Semi RParen statement_matched
    (41) statement_matched -> For LParen . declaration Semi Semi RParen statement_matched
    (44) statement_matched -> For LParen . Semi expression Semi RParen statement_matched
    (46) statement_matched -> For LParen . Semi Semi expression RParen statement_matched
    (48) statement_matched -> For LParen . Semi Semi RParen statement_matched
    (28) statement_unmatched -> For LParen . expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> For LParen . declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> For LParen . Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen . expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen . declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen . expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> For LParen . declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen . expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> For LParen . declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> For LParen . Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> For LParen . Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> For LParen . Semi Semi RParen statement_unmatched
    (59) expression -> . assignment
    (57) declaration -> . type Identifier
    (58) declaration -> . type Identifier Assign expression
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (6) type -> . Int
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Semi            shift and go to state 135
    Identifier      shift and go to state 12
    Int             shift and go to state 7
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 134
    declaration                    shift and go to state 136
    assignment                     shift and go to state 14
    type                           shift and go to state 61
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 124

    (50) statement_matched -> Return expression . Semi

    Semi            shift and go to state 137


state 125

    (51) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 51 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 51 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 51 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 51 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 51 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 51 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 51 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 51 (statement_matched -> opt_expression Semi .)


state 126

    (53) statement_matched -> Break Semi .

    RBrace          reduce using rule 53 (statement_matched -> Break Semi .)
    If              reduce using rule 53 (statement_matched -> Break Semi .)
    While           reduce using rule 53 (statement_matched -> Break Semi .)
    Do              reduce using rule 53 (statement_matched -> Break Semi .)
    For             reduce using rule 53 (statement_matched -> Break Semi .)
    Return          reduce using rule 53 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 53 (statement_matched -> Break Semi .)
    Break           reduce using rule 53 (statement_matched -> Break Semi .)
    Continue        reduce using rule 53 (statement_matched -> Break Semi .)
    Int             reduce using rule 53 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 53 (statement_matched -> Break Semi .)
    Minus           reduce using rule 53 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 53 (statement_matched -> Break Semi .)
    Not             reduce using rule 53 (statement_matched -> Break Semi .)
    Integer         reduce using rule 53 (statement_matched -> Break Semi .)
    LParen          reduce using rule 53 (statement_matched -> Break Semi .)
    Semi            reduce using rule 53 (statement_matched -> Break Semi .)
    Else            reduce using rule 53 (statement_matched -> Break Semi .)


state 127

    (54) statement_matched -> Continue Semi .

    RBrace          reduce using rule 54 (statement_matched -> Continue Semi .)
    If              reduce using rule 54 (statement_matched -> Continue Semi .)
    While           reduce using rule 54 (statement_matched -> Continue Semi .)
    Do              reduce using rule 54 (statement_matched -> Continue Semi .)
    For             reduce using rule 54 (statement_matched -> Continue Semi .)
    Return          reduce using rule 54 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 54 (statement_matched -> Continue Semi .)
    Break           reduce using rule 54 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 54 (statement_matched -> Continue Semi .)
    Int             reduce using rule 54 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 54 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 54 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 54 (statement_matched -> Continue Semi .)
    Not             reduce using rule 54 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 54 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 54 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 54 (statement_matched -> Continue Semi .)
    Else            reduce using rule 54 (statement_matched -> Continue Semi .)


state 128

    (8) function -> type Identifier LParen parameter RParen LBrace block RBrace .

    Int             reduce using rule 8 (function -> type Identifier LParen parameter RParen LBrace block RBrace .)
    $end            reduce using rule 8 (function -> type Identifier LParen parameter RParen LBrace block RBrace .)


state 129

    (52) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 52 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 52 (statement_matched -> LBrace block RBrace .)


state 130

    (19) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 138


state 131

    (22) statement_matched -> While LParen expression . RParen statement_matched
    (23) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 139


state 132

    (24) statement_matched -> Do statement_matched While . expression Semi
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 140
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 133

    (25) statement_unmatched -> Do statement_unmatched While . expression Semi
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 141
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 134

    (26) statement_matched -> For LParen expression . Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> For LParen expression . Semi Semi expression RParen statement_matched
    (36) statement_matched -> For LParen expression . Semi expression Semi RParen statement_matched
    (40) statement_matched -> For LParen expression . Semi Semi RParen statement_matched
    (28) statement_unmatched -> For LParen expression . Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen expression . Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen expression . Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen expression . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 142


state 135

    (30) statement_matched -> For LParen Semi . expression Semi expression RParen statement_matched
    (44) statement_matched -> For LParen Semi . expression Semi RParen statement_matched
    (46) statement_matched -> For LParen Semi . Semi expression RParen statement_matched
    (48) statement_matched -> For LParen Semi . Semi RParen statement_matched
    (31) statement_unmatched -> For LParen Semi . expression Semi expression RParen statement_unmatched
    (45) statement_unmatched -> For LParen Semi . expression Semi RParen statement_unmatched
    (47) statement_unmatched -> For LParen Semi . Semi expression RParen statement_unmatched
    (49) statement_unmatched -> For LParen Semi . Semi RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Semi            shift and go to state 143
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 144
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 136

    (27) statement_matched -> For LParen declaration . Semi expression Semi expression RParen statement_matched
    (33) statement_matched -> For LParen declaration . Semi Semi expression RParen statement_matched
    (37) statement_matched -> For LParen declaration . Semi expression Semi RParen statement_matched
    (41) statement_matched -> For LParen declaration . Semi Semi RParen statement_matched
    (29) statement_unmatched -> For LParen declaration . Semi expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen declaration . Semi Semi expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen declaration . Semi expression Semi RParen statement_unmatched
    (43) statement_unmatched -> For LParen declaration . Semi Semi RParen statement_unmatched

    Semi            shift and go to state 145


state 137

    (50) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 50 (statement_matched -> Return expression Semi .)
    If              reduce using rule 50 (statement_matched -> Return expression Semi .)
    While           reduce using rule 50 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 50 (statement_matched -> Return expression Semi .)
    For             reduce using rule 50 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 50 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 50 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 50 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 50 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 50 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 50 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 50 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 50 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 50 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 50 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 50 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 50 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 50 (statement_matched -> Return expression Semi .)


state 138

    (19) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (20) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (21) statement_unmatched -> If LParen expression RParen . statement
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (17) statement -> . statement_matched
    (18) statement -> . statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 146
    statement_unmatched            shift and go to state 103
    statement                      shift and go to state 147
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 139

    (22) statement_matched -> While LParen expression RParen . statement_matched
    (23) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 148
    statement_unmatched            shift and go to state 149
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 140

    (24) statement_matched -> Do statement_matched While expression . Semi

    Semi            shift and go to state 150


state 141

    (25) statement_unmatched -> Do statement_unmatched While expression . Semi

    Semi            shift and go to state 151


state 142

    (26) statement_matched -> For LParen expression Semi . expression Semi expression RParen statement_matched
    (32) statement_matched -> For LParen expression Semi . Semi expression RParen statement_matched
    (36) statement_matched -> For LParen expression Semi . expression Semi RParen statement_matched
    (40) statement_matched -> For LParen expression Semi . Semi RParen statement_matched
    (28) statement_unmatched -> For LParen expression Semi . expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> For LParen expression Semi . Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen expression Semi . expression Semi RParen statement_unmatched
    (42) statement_unmatched -> For LParen expression Semi . Semi RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Semi            shift and go to state 153
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 152
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 143

    (46) statement_matched -> For LParen Semi Semi . expression RParen statement_matched
    (48) statement_matched -> For LParen Semi Semi . RParen statement_matched
    (47) statement_unmatched -> For LParen Semi Semi . expression RParen statement_unmatched
    (49) statement_unmatched -> For LParen Semi Semi . RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RParen          shift and go to state 155
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 154
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 144

    (30) statement_matched -> For LParen Semi expression . Semi expression RParen statement_matched
    (44) statement_matched -> For LParen Semi expression . Semi RParen statement_matched
    (31) statement_unmatched -> For LParen Semi expression . Semi expression RParen statement_unmatched
    (45) statement_unmatched -> For LParen Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 156


state 145

    (27) statement_matched -> For LParen declaration Semi . expression Semi expression RParen statement_matched
    (33) statement_matched -> For LParen declaration Semi . Semi expression RParen statement_matched
    (37) statement_matched -> For LParen declaration Semi . expression Semi RParen statement_matched
    (41) statement_matched -> For LParen declaration Semi . Semi RParen statement_matched
    (29) statement_unmatched -> For LParen declaration Semi . expression Semi expression RParen statement_unmatched
    (35) statement_unmatched -> For LParen declaration Semi . Semi expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen declaration Semi . expression Semi RParen statement_unmatched
    (43) statement_unmatched -> For LParen declaration Semi . Semi RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    Semi            shift and go to state 157
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 158
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 146

    (19) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (20) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (17) statement -> statement_matched .

    Else            shift and go to state 159
    RBrace          reduce using rule 17 (statement -> statement_matched .)
    If              reduce using rule 17 (statement -> statement_matched .)
    While           reduce using rule 17 (statement -> statement_matched .)
    Do              reduce using rule 17 (statement -> statement_matched .)
    For             reduce using rule 17 (statement -> statement_matched .)
    Return          reduce using rule 17 (statement -> statement_matched .)
    LBrace          reduce using rule 17 (statement -> statement_matched .)
    Break           reduce using rule 17 (statement -> statement_matched .)
    Continue        reduce using rule 17 (statement -> statement_matched .)
    Int             reduce using rule 17 (statement -> statement_matched .)
    Identifier      reduce using rule 17 (statement -> statement_matched .)
    Minus           reduce using rule 17 (statement -> statement_matched .)
    BitNot          reduce using rule 17 (statement -> statement_matched .)
    Not             reduce using rule 17 (statement -> statement_matched .)
    Integer         reduce using rule 17 (statement -> statement_matched .)
    LParen          reduce using rule 17 (statement -> statement_matched .)
    Semi            reduce using rule 17 (statement -> statement_matched .)


state 147

    (21) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 21 (statement_unmatched -> If LParen expression RParen statement .)


state 148

    (22) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> While LParen expression RParen statement_matched .)


state 149

    (23) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 23 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 150

    (24) statement_matched -> Do statement_matched While expression Semi .

    RBrace          reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    If              reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    While           reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Do              reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    For             reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Return          reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    LBrace          reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Break           reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Continue        reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Int             reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Identifier      reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Minus           reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    BitNot          reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Not             reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Integer         reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    LParen          reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Semi            reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)
    Else            reduce using rule 24 (statement_matched -> Do statement_matched While expression Semi .)


state 151

    (25) statement_unmatched -> Do statement_unmatched While expression Semi .

    RBrace          reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    If              reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    While           reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Do              reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    For             reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Return          reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    LBrace          reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Break           reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Continue        reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Int             reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Identifier      reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Minus           reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    BitNot          reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Not             reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Integer         reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    LParen          reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)
    Semi            reduce using rule 25 (statement_unmatched -> Do statement_unmatched While expression Semi .)


state 152

    (26) statement_matched -> For LParen expression Semi expression . Semi expression RParen statement_matched
    (36) statement_matched -> For LParen expression Semi expression . Semi RParen statement_matched
    (28) statement_unmatched -> For LParen expression Semi expression . Semi expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen expression Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 160


state 153

    (32) statement_matched -> For LParen expression Semi Semi . expression RParen statement_matched
    (40) statement_matched -> For LParen expression Semi Semi . RParen statement_matched
    (34) statement_unmatched -> For LParen expression Semi Semi . expression RParen statement_unmatched
    (42) statement_unmatched -> For LParen expression Semi Semi . RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RParen          shift and go to state 162
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 161
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 154

    (46) statement_matched -> For LParen Semi Semi expression . RParen statement_matched
    (47) statement_unmatched -> For LParen Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 163


state 155

    (48) statement_matched -> For LParen Semi Semi RParen . statement_matched
    (49) statement_unmatched -> For LParen Semi Semi RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    statement_matched              shift and go to state 164
    statement_unmatched            shift and go to state 165
    expression                     shift and go to state 104
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 156

    (30) statement_matched -> For LParen Semi expression Semi . expression RParen statement_matched
    (44) statement_matched -> For LParen Semi expression Semi . RParen statement_matched
    (31) statement_unmatched -> For LParen Semi expression Semi . expression RParen statement_unmatched
    (45) statement_unmatched -> For LParen Semi expression Semi . RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RParen          shift and go to state 167
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 166
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 157

    (33) statement_matched -> For LParen declaration Semi Semi . expression RParen statement_matched
    (41) statement_matched -> For LParen declaration Semi Semi . RParen statement_matched
    (35) statement_unmatched -> For LParen declaration Semi Semi . expression RParen statement_unmatched
    (43) statement_unmatched -> For LParen declaration Semi Semi . RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RParen          shift and go to state 169
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 168
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 158

    (27) statement_matched -> For LParen declaration Semi expression . Semi expression RParen statement_matched
    (37) statement_matched -> For LParen declaration Semi expression . Semi RParen statement_matched
    (29) statement_unmatched -> For LParen declaration Semi expression . Semi expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen declaration Semi expression . Semi RParen statement_unmatched

    Semi            shift and go to state 170


state 159

    (19) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (20) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 171
    statement_unmatched            shift and go to state 172
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 160

    (26) statement_matched -> For LParen expression Semi expression Semi . expression RParen statement_matched
    (36) statement_matched -> For LParen expression Semi expression Semi . RParen statement_matched
    (28) statement_unmatched -> For LParen expression Semi expression Semi . expression RParen statement_unmatched
    (38) statement_unmatched -> For LParen expression Semi expression Semi . RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RParen          shift and go to state 174
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 173
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 161

    (32) statement_matched -> For LParen expression Semi Semi expression . RParen statement_matched
    (34) statement_unmatched -> For LParen expression Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 175


state 162

    (40) statement_matched -> For LParen expression Semi Semi RParen . statement_matched
    (42) statement_unmatched -> For LParen expression Semi Semi RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 176
    statement_unmatched            shift and go to state 177
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 163

    (46) statement_matched -> For LParen Semi Semi expression RParen . statement_matched
    (47) statement_unmatched -> For LParen Semi Semi expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 178
    statement_unmatched            shift and go to state 179
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 164

    (48) statement_matched -> For LParen Semi Semi RParen statement_matched .

    RBrace          reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    If              reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    While           reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Do              reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    For             reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Return          reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Break           reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Continue        reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Int             reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Minus           reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Not             reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Integer         reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    LParen          reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Semi            reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)
    Else            reduce using rule 48 (statement_matched -> For LParen Semi Semi RParen statement_matched .)


state 165

    (49) statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    If              reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    While           reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    For             reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 49 (statement_unmatched -> For LParen Semi Semi RParen statement_unmatched .)


state 166

    (30) statement_matched -> For LParen Semi expression Semi expression . RParen statement_matched
    (31) statement_unmatched -> For LParen Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 180


state 167

    (44) statement_matched -> For LParen Semi expression Semi RParen . statement_matched
    (45) statement_unmatched -> For LParen Semi expression Semi RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 181
    statement_unmatched            shift and go to state 182
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 168

    (33) statement_matched -> For LParen declaration Semi Semi expression . RParen statement_matched
    (35) statement_unmatched -> For LParen declaration Semi Semi expression . RParen statement_unmatched

    RParen          shift and go to state 183


state 169

    (41) statement_matched -> For LParen declaration Semi Semi RParen . statement_matched
    (43) statement_unmatched -> For LParen declaration Semi Semi RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    statement_matched              shift and go to state 184
    statement_unmatched            shift and go to state 185
    expression                     shift and go to state 104
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 170

    (27) statement_matched -> For LParen declaration Semi expression Semi . expression RParen statement_matched
    (37) statement_matched -> For LParen declaration Semi expression Semi . RParen statement_matched
    (29) statement_unmatched -> For LParen declaration Semi expression Semi . expression RParen statement_unmatched
    (39) statement_unmatched -> For LParen declaration Semi expression Semi . RParen statement_unmatched
    (59) expression -> . assignment
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    RParen          shift and go to state 187
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 186
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 171

    (19) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 19 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 172

    (20) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 20 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 173

    (26) statement_matched -> For LParen expression Semi expression Semi expression . RParen statement_matched
    (28) statement_unmatched -> For LParen expression Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 188


state 174

    (36) statement_matched -> For LParen expression Semi expression Semi RParen . statement_matched
    (38) statement_unmatched -> For LParen expression Semi expression Semi RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 189
    statement_unmatched            shift and go to state 190
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 175

    (32) statement_matched -> For LParen expression Semi Semi expression RParen . statement_matched
    (34) statement_unmatched -> For LParen expression Semi Semi expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 191
    statement_unmatched            shift and go to state 192
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 176

    (40) statement_matched -> For LParen expression Semi Semi RParen statement_matched .

    RBrace          reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    If              reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    While           reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Do              reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    For             reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Return          reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Break           reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Continue        reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Int             reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Minus           reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Not             reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Integer         reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    LParen          reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Semi            reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)
    Else            reduce using rule 40 (statement_matched -> For LParen expression Semi Semi RParen statement_matched .)


state 177

    (42) statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    If              reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    While           reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    For             reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 42 (statement_unmatched -> For LParen expression Semi Semi RParen statement_unmatched .)


state 178

    (46) statement_matched -> For LParen Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    If              reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    While           reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    For             reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 46 (statement_matched -> For LParen Semi Semi expression RParen statement_matched .)


state 179

    (47) statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 47 (statement_unmatched -> For LParen Semi Semi expression RParen statement_unmatched .)


state 180

    (30) statement_matched -> For LParen Semi expression Semi expression RParen . statement_matched
    (31) statement_unmatched -> For LParen Semi expression Semi expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 193
    statement_unmatched            shift and go to state 194
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 181

    (44) statement_matched -> For LParen Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    If              reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    While           reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    For             reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 44 (statement_matched -> For LParen Semi expression Semi RParen statement_matched .)


state 182

    (45) statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 45 (statement_unmatched -> For LParen Semi expression Semi RParen statement_unmatched .)


state 183

    (33) statement_matched -> For LParen declaration Semi Semi expression RParen . statement_matched
    (35) statement_unmatched -> For LParen declaration Semi Semi expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 195
    statement_unmatched            shift and go to state 196
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 184

    (41) statement_matched -> For LParen declaration Semi Semi RParen statement_matched .

    RBrace          reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    If              reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    While           reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Do              reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    For             reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Return          reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LBrace          reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Break           reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Continue        reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Int             reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Identifier      reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Minus           reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    BitNot          reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Not             reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Integer         reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    LParen          reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Semi            reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)
    Else            reduce using rule 41 (statement_matched -> For LParen declaration Semi Semi RParen statement_matched .)


state 185

    (43) statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .

    RBrace          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    If              reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    While           reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Do              reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    For             reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Return          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LBrace          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Break           reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Continue        reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Int             reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Identifier      reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Minus           reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    BitNot          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Not             reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Integer         reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    LParen          reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)
    Semi            reduce using rule 43 (statement_unmatched -> For LParen declaration Semi Semi RParen statement_unmatched .)


state 186

    (27) statement_matched -> For LParen declaration Semi expression Semi expression . RParen statement_matched
    (29) statement_unmatched -> For LParen declaration Semi expression Semi expression . RParen statement_unmatched

    RParen          shift and go to state 197


state 187

    (37) statement_matched -> For LParen declaration Semi expression Semi RParen . statement_matched
    (39) statement_unmatched -> For LParen declaration Semi expression Semi RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 198
    statement_unmatched            shift and go to state 199
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 188

    (26) statement_matched -> For LParen expression Semi expression Semi expression RParen . statement_matched
    (28) statement_unmatched -> For LParen expression Semi expression Semi expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 200
    statement_unmatched            shift and go to state 201
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 189

    (36) statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    If              reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    While           reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    For             reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 36 (statement_matched -> For LParen expression Semi expression Semi RParen statement_matched .)


state 190

    (38) statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 38 (statement_unmatched -> For LParen expression Semi expression Semi RParen statement_unmatched .)


state 191

    (32) statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    If              reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    While           reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    For             reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 32 (statement_matched -> For LParen expression Semi Semi expression RParen statement_matched .)


state 192

    (34) statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 34 (statement_unmatched -> For LParen expression Semi Semi expression RParen statement_unmatched .)


state 193

    (30) statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 30 (statement_matched -> For LParen Semi expression Semi expression RParen statement_matched .)


state 194

    (31) statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 31 (statement_unmatched -> For LParen Semi expression Semi expression RParen statement_unmatched .)


state 195

    (33) statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .

    RBrace          reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    If              reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    While           reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Do              reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    For             reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Return          reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LBrace          reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Break           reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Continue        reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Int             reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Identifier      reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Minus           reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    BitNot          reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Not             reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Integer         reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    LParen          reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Semi            reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)
    Else            reduce using rule 33 (statement_matched -> For LParen declaration Semi Semi expression RParen statement_matched .)


state 196

    (35) statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    If              reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    While           reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Do              reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    For             reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Return          reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Break           reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Int             reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Not             reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 35 (statement_unmatched -> For LParen declaration Semi Semi expression RParen statement_unmatched .)


state 197

    (27) statement_matched -> For LParen declaration Semi expression Semi expression RParen . statement_matched
    (29) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen . statement_unmatched
    (19) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (22) statement_matched -> . While LParen expression RParen statement_matched
    (24) statement_matched -> . Do statement_matched While expression Semi
    (26) statement_matched -> . For LParen expression Semi expression Semi expression RParen statement_matched
    (27) statement_matched -> . For LParen declaration Semi expression Semi expression RParen statement_matched
    (30) statement_matched -> . For LParen Semi expression Semi expression RParen statement_matched
    (32) statement_matched -> . For LParen expression Semi Semi expression RParen statement_matched
    (33) statement_matched -> . For LParen declaration Semi Semi expression RParen statement_matched
    (36) statement_matched -> . For LParen expression Semi expression Semi RParen statement_matched
    (37) statement_matched -> . For LParen declaration Semi expression Semi RParen statement_matched
    (40) statement_matched -> . For LParen expression Semi Semi RParen statement_matched
    (41) statement_matched -> . For LParen declaration Semi Semi RParen statement_matched
    (44) statement_matched -> . For LParen Semi expression Semi RParen statement_matched
    (46) statement_matched -> . For LParen Semi Semi expression RParen statement_matched
    (48) statement_matched -> . For LParen Semi Semi RParen statement_matched
    (50) statement_matched -> . Return expression Semi
    (51) statement_matched -> . opt_expression Semi
    (52) statement_matched -> . LBrace block RBrace
    (53) statement_matched -> . Break Semi
    (54) statement_matched -> . Continue Semi
    (20) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (21) statement_unmatched -> . If LParen expression RParen statement
    (23) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (25) statement_unmatched -> . Do statement_unmatched While expression Semi
    (28) statement_unmatched -> . For LParen expression Semi expression Semi expression RParen statement_unmatched
    (29) statement_unmatched -> . For LParen declaration Semi expression Semi expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen Semi expression Semi expression RParen statement_unmatched
    (34) statement_unmatched -> . For LParen expression Semi Semi expression RParen statement_unmatched
    (35) statement_unmatched -> . For LParen declaration Semi Semi expression RParen statement_unmatched
    (38) statement_unmatched -> . For LParen expression Semi expression Semi RParen statement_unmatched
    (39) statement_unmatched -> . For LParen declaration Semi expression Semi RParen statement_unmatched
    (42) statement_unmatched -> . For LParen expression Semi Semi RParen statement_unmatched
    (43) statement_unmatched -> . For LParen declaration Semi Semi RParen statement_unmatched
    (45) statement_unmatched -> . For LParen Semi expression Semi RParen statement_unmatched
    (47) statement_unmatched -> . For LParen Semi Semi expression RParen statement_unmatched
    (49) statement_unmatched -> . For LParen Semi Semi RParen statement_unmatched
    (55) opt_expression -> . expression
    (56) opt_expression -> . empty
    (59) expression -> . assignment
    (1) empty -> .
    (60) assignment -> . conditional
    (81) assignment -> . Identifier Assign expression
    (61) conditional -> . logical_or
    (98) conditional -> . logical_or Question expression Colon conditional
    (62) logical_or -> . logical_and
    (82) logical_or -> . logical_or Or logical_and
    (63) logical_and -> . bit_or
    (83) logical_and -> . logical_and And bit_or
    (64) bit_or -> . xor
    (84) bit_or -> . bit_or BitOr xor
    (65) xor -> . bit_and
    (85) xor -> . xor Xor bit_and
    (66) bit_and -> . equality
    (86) bit_and -> . bit_and BitAnd equality
    (67) equality -> . relational
    (87) equality -> . equality NotEqual relational
    (88) equality -> . equality Equal relational
    (68) relational -> . additive
    (89) relational -> . relational Less additive
    (90) relational -> . relational Greater additive
    (91) relational -> . relational LessEqual additive
    (92) relational -> . relational GreaterEqual additive
    (69) additive -> . multiplicative
    (93) additive -> . additive Plus multiplicative
    (94) additive -> . additive Minus multiplicative
    (70) multiplicative -> . unary
    (95) multiplicative -> . multiplicative Mul unary
    (96) multiplicative -> . multiplicative Div unary
    (97) multiplicative -> . multiplicative Mod unary
    (71) unary -> . postfix
    (78) unary -> . Minus unary
    (79) unary -> . BitNot unary
    (80) unary -> . Not unary
    (72) postfix -> . primary
    (73) postfix -> . Identifier LParen expression_list RParen
    (99) primary -> . Integer
    (100) primary -> . Identifier
    (101) primary -> . LParen expression RParen

    If              shift and go to state 105
    While           shift and go to state 106
    Do              shift and go to state 107
    For             shift and go to state 108
    Return          shift and go to state 109
    LBrace          shift and go to state 97
    Break           shift and go to state 111
    Continue        shift and go to state 112
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 25
    BitNot          shift and go to state 28
    Not             shift and go to state 29
    Integer         shift and go to state 32
    LParen          shift and go to state 31

    expression                     shift and go to state 104
    statement_matched              shift and go to state 202
    statement_unmatched            shift and go to state 203
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 113
    assignment                     shift and go to state 14
    conditional                    shift and go to state 15
    logical_or                     shift and go to state 16
    logical_and                    shift and go to state 17
    bit_or                         shift and go to state 18
    xor                            shift and go to state 19
    bit_and                        shift and go to state 20
    equality                       shift and go to state 21
    relational                     shift and go to state 22
    additive                       shift and go to state 23
    multiplicative                 shift and go to state 24
    unary                          shift and go to state 26
    postfix                        shift and go to state 27
    primary                        shift and go to state 30

state 198

    (37) statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .

    RBrace          reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    If              reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    While           reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Do              reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    For             reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Return          reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LBrace          reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Break           reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Continue        reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Int             reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Identifier      reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Minus           reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    BitNot          reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Not             reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Integer         reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    LParen          reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Semi            reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)
    Else            reduce using rule 37 (statement_matched -> For LParen declaration Semi expression Semi RParen statement_matched .)


state 199

    (39) statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .

    RBrace          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    If              reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    While           reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Do              reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    For             reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Return          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LBrace          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Break           reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Continue        reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Int             reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Identifier      reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Minus           reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    BitNot          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Not             reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Integer         reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    LParen          reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)
    Semi            reduce using rule 39 (statement_unmatched -> For LParen declaration Semi expression Semi RParen statement_unmatched .)


state 200

    (26) statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 26 (statement_matched -> For LParen expression Semi expression Semi expression RParen statement_matched .)


state 201

    (28) statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 28 (statement_unmatched -> For LParen expression Semi expression Semi expression RParen statement_unmatched .)


state 202

    (27) statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .

    RBrace          reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    If              reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    While           reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Do              reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    For             reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Return          reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LBrace          reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Break           reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Continue        reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Int             reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Identifier      reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Minus           reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    BitNot          reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Not             reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Integer         reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    LParen          reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Semi            reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)
    Else            reduce using rule 27 (statement_matched -> For LParen declaration Semi expression Semi expression RParen statement_matched .)


state 203

    (29) statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .

    RBrace          reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    If              reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    While           reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Do              reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    For             reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Return          reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LBrace          reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Break           reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Continue        reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Int             reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Identifier      reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Minus           reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    BitNot          reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Not             reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Integer         reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    LParen          reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)
    Semi            reduce using rule 29 (statement_unmatched -> For LParen declaration Semi expression Semi expression RParen statement_unmatched .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RParen in state 11 resolved as shift
WARNING: shift/reduce conflict for LParen in state 12 resolved as shift
WARNING: shift/reduce conflict for Minus in state 23 resolved as shift
WARNING: shift/reduce conflict for LParen in state 56 resolved as shift
WARNING: shift/reduce conflict for Minus in state 77 resolved as shift
WARNING: shift/reduce conflict for Minus in state 78 resolved as shift
WARNING: shift/reduce conflict for Minus in state 79 resolved as shift
WARNING: shift/reduce conflict for Minus in state 80 resolved as shift
